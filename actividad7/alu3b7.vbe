--
-- Generated by VASY
--
ENTITY alu3b7 IS
PORT(
  a	: IN BIT_VECTOR(2 DOWNTO 0);
  b	: IN BIT_VECTOR(2 DOWNTO 0);
  s	: IN BIT_VECTOR(2 DOWNTO 0);
  resultado	: OUT BIT_VECTOR(5 DOWNTO 0);
  vdd	: IN BIT;
  vss	: IN BIT
);
END alu3b7;

ARCHITECTURE VBE OF alu3b7 IS

  SIGNAL rtlatom_8	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL rtlatom_7	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL rtlsum_6	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL rtlcarry_6	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL rtlatom_5	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL rtlatom_4	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL rtlsum_3	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL rtlcarry_3	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL rtlsum_2	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL rtlcarry_2	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL rtlatom_1	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL rtlsum_0	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL rtlcarry_0	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL regsuma	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL regresta	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL regmulti	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL regand	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL regor	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL regxor	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL regnota	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL regnotb	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL renglon0	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL renglon1	: BIT_VECTOR(5 DOWNTO 0);
  SIGNAL renglon2	: BIT_VECTOR(5 DOWNTO 0);
BEGIN

  rtlcarry_6(0) <= '0';
  rtlsum_6 <= ((rtlatom_7 XOR rtlatom_8) XOR rtlcarry_6);
  rtlcarry_6(5 downto 1) <= (((rtlatom_7(4 downto 0) AND rtlatom_8(4 downto 0)) OR (rtlatom_7(4 downto 0) 
AND rtlcarry_6(4 downto 0))) OR (rtlatom_8(4 downto 0) AND rtlcarry_6(4 downto 0))
);
  rtlcarry_3(0) <= '1';
  rtlsum_3 <= ((rtlatom_4 XOR NOT(rtlatom_5)) XOR rtlcarry_3);
  rtlcarry_3(5 downto 1) <= (((rtlatom_4(4 downto 0) AND NOT(rtlatom_5(4 downto 0))) OR (rtlatom_4(4 downto 0)
 AND rtlcarry_3(4 downto 0))) OR (NOT(rtlatom_5(4 downto 0)) AND rtlcarry_3(4 downto 0)
));
  rtlcarry_2(0) <= '0';
  rtlsum_2 <= ((renglon0 XOR renglon1) XOR rtlcarry_2);
  rtlcarry_2(5 downto 1) <= (((renglon0(4 downto 0) AND renglon1(4 downto 0)) OR (renglon0(4 downto 0) AND rtlcarry_2(4 downto 0)
)) OR (renglon1(4 downto 0) AND rtlcarry_2(4 downto 0)));
  rtlcarry_0(0) <= '0';
  rtlsum_0 <= ((rtlatom_1 XOR renglon2) XOR rtlcarry_0);
  rtlcarry_0(5 downto 1) <= (((rtlatom_1(4 downto 0) AND renglon2(4 downto 0)) OR (rtlatom_1(4 downto 0) 
AND rtlcarry_0(4 downto 0))) OR (renglon2(4 downto 0) AND rtlcarry_0(4 downto 0)));
  resultado <= regsuma WHEN (s = "000") ELSE
     regresta WHEN (s = "001") ELSE
     regmulti WHEN (s = "010") ELSE
     regand WHEN (s = "011") ELSE
     regor WHEN (s = "100") ELSE
     regxor WHEN (s = "101") ELSE
     regnota WHEN (s = "110") ELSE
     regnotb;
  regnotb <= ("000" & NOT(b));
  regnota <= ("000" & NOT(a));
  regxor <= (("000" & a) XOR ("000" & b));
  regor <= (("000" & a) OR ("000" & b));
  regand <= (("000" & a) AND ("000" & b));
  regmulti <= rtlsum_0;
  rtlatom_1 <= rtlsum_2;
  renglon2 <= (('0' & a) & "00") WHEN (b(2) = '1') ELSE
     "000000";
  renglon1 <= (("00" & a) & '0') WHEN (b(1) = '1') ELSE
     "000000";
  renglon0 <= ("000" & a) WHEN (b(0) = '1') ELSE
     "000000";
  regresta <= rtlsum_3;
  rtlatom_5 <= ("000" & b);
  rtlatom_4 <= ("000" & a);
  regsuma <= rtlsum_6;
  rtlatom_8 <= ("000" & b);
  rtlatom_7 <= ("000" & a);
END VBE;
